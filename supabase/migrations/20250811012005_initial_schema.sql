-- profiles table
CREATE TABLE public.profiles (
  id uuid NOT NULL REFERENCES auth.users ON DELETE CASCADE,
  full_name TEXT,
  avatar_url TEXT,
  -- role can be 'parent', 'therapist', 'child'
  user_role TEXT NOT NULL,
  PRIMARY KEY (id)
);
-- policy to allow users to read their own profile
ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Users can view their own profile." ON public.profiles FOR SELECT USING (auth.uid() = id);
CREATE POLICY "Users can insert their own profile." ON public.profiles FOR INSERT WITH CHECK (auth.uid() = id);
CREATE POLICY "Users can update their own profile." ON public.profiles FOR UPDATE USING (auth.uid() = id);


-- categories table
CREATE TABLE public.categories (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name TEXT NOT NULL UNIQUE,
  user_id uuid REFERENCES public.profiles ON DELETE CASCADE, -- null for default categories, user_id for custom ones
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);
ALTER TABLE public.categories ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Authenticated users can view categories." ON public.categories FOR SELECT TO authenticated USING (true);
CREATE POLICY "Users can insert their own categories." ON public.categories FOR INSERT WITH CHECK (auth.uid() = user_id);


-- pictograms table
CREATE TABLE public.pictograms (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name TEXT NOT NULL UNIQUE,
  image_url TEXT NOT NULL,
  audio_url TEXT,
  category_id BIGINT REFERENCES public.categories ON DELETE SET NULL,
  user_id uuid REFERENCES public.profiles ON DELETE CASCADE, -- null for default pictos, user_id for custom ones
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);
ALTER TABLE public.pictograms ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Authenticated users can view pictograms." ON public.pictograms FOR SELECT TO authenticated USING (true);
CREATE POLICY "Users can insert their own pictograms." ON public.pictograms FOR INSERT WITH CHECK (auth.uid() = user_id);


-- social_stories table
CREATE TABLE public.social_stories (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  title TEXT NOT NULL,
  user_id uuid NOT NULL REFERENCES public.profiles ON DELETE CASCADE,
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);
ALTER TABLE public.social_stories ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Users can view their own social stories." ON public.social_stories FOR SELECT USING (auth.uid() = user_id);
CREATE POLICY "Users can insert their own social stories." ON public.social_stories FOR INSERT WITH CHECK (auth.uid() = user_id);
CREATE POLICY "Users can update their own social stories." ON public.social_stories FOR UPDATE USING (auth.uid() = user_id);
CREATE POLICY "Users can delete their own social stories." ON public.social_stories FOR DELETE USING (auth.uid() = user_id);


-- social_story_pages table
CREATE TABLE public.social_story_pages (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  story_id BIGINT NOT NULL REFERENCES public.social_stories ON DELETE CASCADE,
  page_number INT NOT NULL,
  image_url TEXT,
  text TEXT,
  audio_url TEXT,
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);
ALTER TABLE public.social_story_pages ENABLE ROW LEVEL SECURITY;
-- Users can manage pages for stories they own. This is a bit more complex to policy.
-- A simpler approach is to rely on the story ownership.
-- A user can only access pages if they can access the parent story.
CREATE POLICY "Users can view pages of their stories." ON public.social_story_pages FOR SELECT USING (
  EXISTS (
    SELECT 1 FROM public.social_stories
    WHERE social_stories.id = social_story_pages.story_id AND social_stories.user_id = auth.uid()
  )
);
CREATE POLICY "Users can insert pages for their stories." ON public.social_story_pages FOR INSERT WITH CHECK (
  EXISTS (
    SELECT 1 FROM public.social_stories
    WHERE social_stories.id = social_story_pages.story_id AND social_stories.user_id = auth.uid()
  )
);
CREATE POLICY "Users can update pages for their stories." ON public.social_story_pages FOR UPDATE USING (
  EXISTS (
    SELECT 1 FROM public.social_stories
    WHERE social_stories.id = social_story_pages.story_id AND social_stories.user_id = auth.uid()
  )
);
CREATE POLICY "Users can delete pages for their stories." ON public.social_story_pages FOR DELETE USING (
  EXISTS (
    SELECT 1 FROM public.social_stories
    WHERE social_stories.id = social_story_pages.story_id AND social_stories.user_id = auth.uid()
  )
);
